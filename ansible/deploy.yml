# - name: Deploy Chat App to EC2 on Windows
#   hosts: chat_servers
#   become: yes
#   vars:
#     docker_image_backend: "{{ docker_image_backend }}"
#     docker_image_frontend: "{{ docker_image_frontend }}"
#     mongo_data_dir: "C:\\data\\db"
#   tasks:
#     - name: Install Docker on Windows
#       win_chocolatey:
#         name: docker-desktop
#         state: present

#     - name: Start Docker service
#       win_service:
#         name: Docker
#         start_mode: auto
#         state: started

#     - name: Install Docker Compose
#       win_get_url:
#         url: "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Windows-x86_64.exe"
#         dest: "C:\\Program Files\\Docker\\docker-compose.exe"

#     - name: Copy Docker Compose file
#       win_copy:
#         src: ../docker-compose.yml
#         dest: C:\\Users\\Administrator\\docker-compose.yml

#     - name: Deploy application using Docker Compose
#       win_shell: |
#         docker-compose -f C:\\Users\\Administrator\\docker-compose.yml up -d

- name: Deploy Chat App to EC2
  hosts: chat_servers
  become: yes
  vars:
    docker_image_backend: "devgixa/backend-service:latest"
    docker_image_frontend: "devgixa/frontend-service:latest"
    network_name: "app-network"
    backend_port: "4040"
    ansible_python_interpreter: /usr/local/bin/python3.9

  tasks:
    - name: Ensure Docker is installed
      package:
        name: docker
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install Python docker library for Ansible Docker modules
      pip:
        name: docker==6.1.3  # Try an older version if 7.1.0 fails
        state: present
        executable: /usr/local/bin/pip3.9

    - name: Install requests library for Docker Ansible module
      pip:
        name: requests
        state: present
        executable: /usr/local/bin/pip3.9

    - name: Remove existing backend container (if running)
      shell: docker rm -f backend-container || true
      ignore_errors: yes

    - name: Remove existing frontend container (if running)
      shell: docker rm -f frontend-container || true
      ignore_errors: yes

    - name: Pull the latest Docker images
      shell: |
        docker pull {{ docker_image_backend }}
        docker pull {{ docker_image_frontend }}

    - name: Create Docker network
      docker_network:
        name: "{{ network_name }}"
        state: present
      environment:
        DOCKER_HOST: "unix:///var/run/docker.sock"  # Explicitly set socket

    - name: Run backend container
      docker_container:
        name: backend-container
        image: "{{ docker_image_backend }}"
        state: started
        restart_policy: always
        networks:
          - name: "{{ network_name }}"
        ports:
          - "{{ backend_port }}:{{ backend_port }}"
      environment:
        DOCKER_HOST: "unix:///var/run/docker.sock"  # Explicitly set socket

    - name: Run frontend container
      docker_container:
        name: frontend-container
        image: "{{ docker_image_frontend }}"
        state: started
        restart_policy: always
        networks:
          - name: "{{ network_name }}"
        ports:
          - "80:5173"
      environment:
        DOCKER_HOST: "unix:///var/run/docker.sock"  # Explicitly set socket
