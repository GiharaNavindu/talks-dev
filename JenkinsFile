pipeline {
    agent any

    environment {
        DOCKER_USERNAME = 'devgixa'
        DOCKER_IMAGE_FRONTEND = 'devgixa/frontend-service'
        DOCKER_IMAGE_BACKEND = 'devgixa/backend-service'
        BUILD_TAG = "latest"
        NETWORK_NAME = 'app-network'
        BACKEND_PORT = '4040'
        SSH_USER = 'Ubuntu'
        SSH_KEY = "$HOME/.ssh/chatnew.pem" // Adjusted for WSL
        EC2_PUBLIC_IP = '3.86.206.251' // Replace with actual EC2 instance public IP
    }

    stages {
        stage('SCM Checkout') {
            steps {
                retry(3) {
                    git branch: 'main', url: 'https://github.com/GiharaNavindu/talks-dev.git'
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG} ./client"
                    sh "docker build -t ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG} ./api"
                }

                script {
                    withCredentials([string(credentialsId: 'Dockerpwd', variable: 'DOCKER_PASSWORD')]) {
                        sh "echo '${DOCKER_PASSWORD}' | docker login -u ${DOCKER_USERNAME} --password-stdin"
                    }
                    sh "docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                    sh "docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                }
            }
        }

        stage('Deploy on EC2 with Ansible') {
            steps {
                script {
                    echo "Deploying backend and frontend on EC2 using Ansible..."

                    // Ensure SSH key is copied into WSL and has correct permissions
                    sh """
                        if [ ! -d /var/lib/jenkins/.ssh ]; then
                            mkdir -p /var/lib/jenkins/.ssh
                        fi
                        if [ ! -f ${SSH_KEY} ]; then
                            cp /mnt/c/Users/MSI20/.ssh/chatnew.pem ${SSH_KEY}
                            chmod 600 ${SSH_KEY}
                        fi
                    """

                    // Run Ansible playbook in WSL
                    sh "ansible-playbook -i ansible/inventory.ini ansible/deploy.yml --private-key ${SSH_KEY}"
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            echo "Logged out from Docker Hub."
        }
    }
}
