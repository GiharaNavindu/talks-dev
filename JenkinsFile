pipeline {
    agent any

    environment {
        DOCKER_USERNAME = 'devgixa'
        DOCKER_IMAGE_FRONTEND = 'devgixa/frontend-service'
        DOCKER_IMAGE_BACKEND = 'devgixa/backend-service'
        BUILD_TAG = "latest"
        NETWORK_NAME = 'app-network'
        BACKEND_PORT = '4040'
        TERRAFORM_PATH = 'C:\\terraform_1.11.3_windows_386\\terraform.exe'
    }

    stages {
        stage('SCM Checkout') {
            steps {
                retry(3) {
                    git branch: 'main', url: 'https://github.com/GiharaNavindu/talks-dev.git'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    bat "docker build -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG} ./client"
                    bat "docker build -t ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG} ./api"
                }
            }
        }

        stage('Push Images to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'Dockerpwd', variable: 'DOCKER_PASSWORD')]) {
                        bat "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    }
                    bat "docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                    bat "docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                }
            }
        }

        stage('Provision Infrastructure with Terraform') {
            steps {
                script {
                    dir('terraform') {
                        bat "${TERRAFORM_PATH} init"
                        bat "${TERRAFORM_PATH} apply -auto-approve"
                        
                        // Capture the EC2 public IP
                        def ec2PublicIp = bat(script: "${TERRAFORM_PATH} output -raw instance_ip", returnStdout: true).trim()
                        env.EC2_PUBLIC_IP = ec2PublicIp
                        echo "Provisioned EC2 Instance IP: ${env.EC2_PUBLIC_IP}"
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    def ec2Ip = env.EC2_PUBLIC_IP
                    sshagent(['chat-app-key']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ec2-user@${ec2Ip} '
                            docker pull ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG} &&
                            docker pull ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG} &&
                            docker run -d -p 4040:4040 --name backend-container ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG} &&
                            docker run -d -p 5173:5173 --name frontend-container ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}
                        '
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
            echo "Logged out from Docker Hub."
        }
    }
}
