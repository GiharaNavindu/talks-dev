pipeline {
    agent any

    environment {
        DOCKER_USERNAME = 'devgixa'
        DOCKER_IMAGE_FRONTEND = 'devgixa/frontend-service'
        DOCKER_IMAGE_BACKEND = 'devgixa/backend-service'
        BUILD_TAG = "latest"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                retry(3) {
                    git branch: 'main', url: 'https://github.com/GiharaNavindu/talks-dev.git'
                }
            }
        }

        stage('Build Frontend Image') {
            steps {
                script {
                    bat "docker build -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG} ./client"
                }
            }
        }

        stage('Build Backend Image') {
            steps {
                script {
                    bat "docker build -t ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG} ./api"
                }
            }
        }

        stage('Run Locally for Testing') {
            steps {
                script {
                    echo "Stopping and removing existing containers..."

                    // Stop and remove containers if they exist
                    bat """
                        IF EXIST (docker ps -aq -f name=frontend-container) (
                            docker stop frontend-container
                            docker rm frontend-container
                        )

                        IF EXIST (docker ps -aq -f name=backend-container) (
                            docker stop backend-container
                            docker rm backend-container
                        )
                    """

                    echo "Checking if network 'app-network' exists and creating if necessary..."
                    bat """
                        docker network inspect app-network > NUL 2>&1 || docker network create app-network
                    """

                    echo "Running new containers..."
                    bat """
                        docker run -d --name backend-container --network app-network \
                            --env-file ./api/.env \
                            -p 4040:4040 ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}

                        docker run -d --name frontend-container --network app-network \
                            -p 5173:5173 ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}
                    """

                    echo "Containers are running. Use 'docker ps' to check the status."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'Dockerpwd', variable: 'DOCKER_PASSWORD')]) {
                        def loginResult = bat(script: "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}", returnStatus: true)
                        if (loginResult != 0) {
                            error "Docker login failed!"
                        } else {
                            echo "Successfully logged in to Docker Hub."
                        }
                    }
                }
            }
        }

        stage('Push Images to Docker Hub') {
            steps {
                script {
                    bat "docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                    bat "docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
            echo "Logged out from Docker Hub."
        }
    }
}
