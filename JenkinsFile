pipeline {
    agent any

    environment {
        DOCKER_USERNAME = 'devgixa'
        DOCKER_IMAGE_FRONTEND = 'devgixa/frontend-service'
        DOCKER_IMAGE_BACKEND = 'devgixa/backend-service'
        BUILD_TAG = "${env.BUILD_ID}-${env.GIT_COMMIT.take(7)}" // Unique build tag
        NETWORK_NAME = 'app-network'
        BACKEND_PORT = '4040'
        SSH_USER = 'ubuntu'
        SSH_KEY = 'chat-app-key.pem'
    }

    stages {
        stage('SCM Checkout') {
            steps {
                retry(3) {
                    git branch: 'main', 
                    url: 'https://github.com/GiharaNavindu/talks-dev.git'
                }
                script {
                    sh "chmod 400 ${SSH_KEY}" // Fix SSH key permissions
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG} ./client"
                    sh "docker build -t ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG} ./api"
                    
                    withCredentials([string(credentialsId: 'Dockerpwd', variable: 'DOCKER_PASSWORD')]) {
                        script {
                            def loginStatus = sh(
                                script: "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}",
                                returnStatus: true
                            )
                            if (loginStatus != 0) {
                                error("Docker login failed")
                            }
                        }
                        sh "docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                        sh "docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                    }
                }
            }
        }

        stage('Provision EC2 Instance') {
            steps {
                dir('terraform') {
                    withCredentials([
                        string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        terraform(version: '1.1.3', installationStep: true)
                        terraformInit()
                        terraformApply(autoApprove: true)
                        script {
                            env.EC2_PUBLIC_IP = terraformOutput(name: 'instance_ip').trim()
                        }
                    }
                }
            }
        }

        stage('Deploy on EC2') {
            steps {
                script {
                    sshagent(credentials: [SSH_KEY]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${SSH_USER}@${env.EC2_PUBLIC_IP} '
                                sudo apt-get update -qq
                                sudo apt-get install -y docker.io
                                sudo systemctl start docker
                                
                                docker network inspect ${NETWORK_NAME} >/dev/null 2>&1 || 
                                docker network create ${NETWORK_NAME}
                                
                                docker pull ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}
                                docker pull ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}
                                
                                docker run -d --rm --name backend-service \\
                                  --network ${NETWORK_NAME} \\
                                  -p ${BACKEND_PORT}:${BACKEND_PORT} \\
                                  ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}
                                
                                docker run -d --rm --name frontend-service \\
                                  --network ${NETWORK_NAME} \\
                                  -p 80:5173 \\
                                  ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}
                            '
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            cleanWs()
        }
        failure {
            slackSend channel: '#ci-cd', 
                      message: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
        }
    }
}
