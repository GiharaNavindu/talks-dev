pipeline {
    agent any

    environment {
        DOCKER_USERNAME = 'devgixa'
        DOCKER_IMAGE_FRONTEND = 'devgixa/frontend-service'
        DOCKER_IMAGE_BACKEND = 'devgixa/backend-service'
        BUILD_TAG = "latest"
        NETWORK_NAME = 'app-network'
        BACKEND_PORT = '4040'
        TERRAFORM_PATH = 'C:\\terraform_1.11.3_windows_386\\terraform.exe'
        SSH_USER = 'ubuntu'  // Default user for Ubuntu AMIs
        SSH_KEY = 'chat-app-key.pem' // Update with your key path
        PROVIDER_VERSION = "3.0.0"  // Specify your AWS provider version
        PROVIDER_PATH = ".terraform/providers/hashicorp/aws/${PROVIDER_VERSION}/linux_amd64/terraform-provider-aws"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                retry(3) {
                    git branch: 'main', url: 'https://github.com/GiharaNavindu/talks-dev.git'
                }
            }
        }

        stage('Check and Install Terraform Provider') {
            steps {
                script {
                    echo "Checking if AWS provider is installed..."
                    
                    // Check if the provider is already installed
                    def providerInstalled = fileExists(PROVIDER_PATH)
                    
                    if (!providerInstalled) {
                        echo "Provider not found. Downloading provider..."

                        // Download the provider manually if not found
                        bat """
                            mkdir -p .terraform/providers/hashicorp/aws/${PROVIDER_VERSION}/linux_amd64
                            curl -L https://releases.hashicorp.com/terraform-provider-aws/${PROVIDER_VERSION}/terraform-provider-aws_${PROVIDER_VERSION}_linux_amd64.zip -o terraform-provider-aws.zip
                            unzip terraform-provider-aws.zip -d .terraform/providers/hashicorp/aws/${PROVIDER_VERSION}/linux_amd64/
                            rm terraform-provider-aws.zip
                        """
                    } else {
                        echo "Provider is already installed, skipping download."
                    }
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    bat "docker build -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG} ./client"
                    bat "docker build -t ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG} ./api"
                }

                script {
                    withCredentials([string(credentialsId: 'Dockerpwd', variable: 'DOCKER_PASSWORD')]) {
                        bat "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    }
                    bat "docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                    bat "docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                }
            }
        }

        stage('Provision EC2 Instance') {
            steps {
                script {
                    echo "Running Terraform inside the 'terraform' directory..."
                }

                dir('terraform') {  // Ensure Terraform runs in the correct directory
                    bat "${TERRAFORM_PATH} init -upgrade"
                    bat "${TERRAFORM_PATH} apply -auto-approve"

                    script {
                        env.EC2_PUBLIC_IP = bat(script: "${TERRAFORM_PATH} output -raw instance_ip", returnStdout: true).trim()
                        echo "Provisioned EC2 Instance IP: ${env.EC2_PUBLIC_IP}"
                    }
                }
            }
        }

        stage('Deploy on EC2') {
            steps {
                script {
                    echo "Deploying backend and frontend on EC2..."

                    bat """
                        echo "Installing Docker on EC2..."
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "sudo apt update && sudo apt install -y docker.io"
                        
                        echo "Pulling images..."
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "docker pull ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "docker pull ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                        
                        echo "Starting containers..."
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "docker network create ${NETWORK_NAME} || true"
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "docker run -d --name backend-container --network ${NETWORK_NAME} -p ${BACKEND_PORT}:${BACKEND_PORT} ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "docker run -d --name frontend-container --network ${NETWORK_NAME} -p 80:5173 ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                    """
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
            echo "Logged out from Docker Hub."
        }
    }
}
