pipeline {
    agent any

    environment {
        DOCKER_USERNAME = 'devgixa'
        DOCKER_IMAGE_FRONTEND = 'devgixa/frontend-service'
        DOCKER_IMAGE_BACKEND = 'devgixa/backend-service'
        BUILD_TAG = "latest"
        NETWORK_NAME = 'app-network'
        BACKEND_PORT = '4040'
        TERRAFORM_PATH = 'C:\\terraform_1.11.3_windows_386\\terraform.exe'
        SSH_USER = 'ubuntu'  // Default user for Ubuntu AMIs
        SSH_KEY = 'C:\\path\\to\\chat-app-key.pem' // Update with your private key path
    }

    stages {
        stage('SCM Checkout') {
            steps {
                script {
                    echo "üîπ Cloning repository..."
                    retry(3) {
                        git branch: 'main', url: 'https://github.com/GiharaNavindu/talks-dev.git'
                    }
                    echo "‚úÖ Repository cloned successfully."
                }
            }
        }

        stage('Verify Terraform Config') {
            steps {
                script {
                    def terraformConfigExists = bat(script: 'if exist main.tf echo "FOUND"', returnStdout: true).trim()
                    if (terraformConfigExists != "FOUND") {
                        error "‚ùå ERROR: Terraform configuration files are missing! Ensure main.tf is present in the workspace."
                    } else {
                        echo "‚úÖ Terraform configuration files found."
                    }
                }
            }
        }

        stage('Initialize and Apply Terraform') {
            steps {
                script {
                    echo "üîπ Initializing Terraform..."
                    bat "${TERRAFORM_PATH} init"
                    
                    echo "üîπ Applying Terraform configuration..."
                    bat "${TERRAFORM_PATH} apply -auto-approve"

                    script {
                        echo "üîπ Fetching EC2 public IP..."
                        env.EC2_PUBLIC_IP = bat(script: "${TERRAFORM_PATH} output -raw instance_ip", returnStdout: true).trim()
                        if (!env.EC2_PUBLIC_IP) {
                            error "‚ùå ERROR: Failed to fetch EC2 public IP. Check Terraform outputs."
                        }
                        echo "‚úÖ Provisioned EC2 Instance IP: ${env.EC2_PUBLIC_IP}"
                    }
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    echo "üîπ Building Docker images..."
                    bat "docker build -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG} ./client"
                    bat "docker build -t ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG} ./api"
                    echo "‚úÖ Docker images built successfully."

                    echo "üîπ Logging into Docker Hub..."
                    withCredentials([string(credentialsId: 'Dockerpwd', variable: 'DOCKER_PASSWORD')]) {
                        def loginResult = bat(script: "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}", returnStatus: true)
                        if (loginResult != 0) {
                            error "‚ùå ERROR: Docker login failed!"
                        }
                    }
                    echo "‚úÖ Successfully logged into Docker Hub."

                    echo "üîπ Pushing images to Docker Hub..."
                    bat "docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                    bat "docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                    echo "‚úÖ Docker images pushed successfully."
                }
            }
        }

        stage('Deploy on EC2') {
            steps {
                script {
                    echo "üîπ Installing Docker on EC2..."
                    def dockerInstall = bat(script: """
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "sudo apt update && sudo apt install -y docker.io"
                    """, returnStatus: true)
                    if (dockerInstall != 0) {
                        error "‚ùå ERROR: Failed to install Docker on EC2."
                    }
                    echo "‚úÖ Docker installed successfully on EC2."

                    echo "üîπ Pulling Docker images on EC2..."
                    def pullBackend = bat(script: "ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} 'docker pull ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}'", returnStatus: true)
                    def pullFrontend = bat(script: "ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} 'docker pull ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}'", returnStatus: true)
                    if (pullBackend != 0 || pullFrontend != 0) {
                        error "‚ùå ERROR: Failed to pull Docker images on EC2."
                    }
                    echo "‚úÖ Docker images pulled successfully on EC2."

                    echo "üîπ Setting up Docker network..."
                    bat "ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} 'docker network create ${NETWORK_NAME} || true'"
                    echo "‚úÖ Docker network setup completed."

                    echo "üîπ Running backend container on EC2..."
                    def runBackend = bat(script: """
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "
                            docker run -d --name backend-container --network ${NETWORK_NAME} \
                            -p ${BACKEND_PORT}:${BACKEND_PORT} ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                    """, returnStatus: true)
                    if (runBackend != 0) {
                        error "‚ùå ERROR: Failed to start backend container on EC2."
                    }
                    echo "‚úÖ Backend container is running on EC2."

                    echo "üîπ Running frontend container on EC2..."
                    def runFrontend = bat(script: """
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "
                            docker run -d --name frontend-container --network ${NETWORK_NAME} \
                            -p 80:5173 ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                    """, returnStatus: true)
                    if (runFrontend != 0) {
                        error "‚ùå ERROR: Failed to start frontend container on EC2."
                    }
                    echo "‚úÖ Frontend container is running on EC2."

                    echo "üöÄ Deployment completed successfully! Access frontend at http://${env.EC2_PUBLIC_IP}"
                }
            }
        }
    }

    post {
        always {
            echo "üîπ Logging out from Docker Hub..."
            bat 'docker logout'
            echo "‚úÖ Logged out from Docker Hub."
        }
    }
}
