pipeline {
    agent any

    tools {
        // Install via Jenkins Global Tool Configuration (Name: terraform-1.11.3)
        terraform 'terraform-1.11.3' 
    }

    environment {
        DOCKER_USERNAME = 'devgixa'
        DOCKER_IMAGE_FRONTEND = 'devgixa/frontend-service'
        DOCKER_IMAGE_BACKEND = 'devgixa/backend-service'
        BUILD_TAG = "latest"
        NETWORK_NAME = 'app-network'
        BACKEND_PORT = '4040'
        SSH_USER = 'ubuntu'
        SSH_KEY = 'chat-app-key.pem'
        TF_PLUGIN_CACHE_DIR = "${WORKSPACE}\\.terraform-cache" // Caching directory
    }

    stages {
        stage('SCM Checkout') {
            steps {
                retry(3) {
                    git branch: 'main', url: 'https://github.com/GiharaNavindu/talks-dev.git'
                }
                // Create Terraform cache directory
                bat "if not exist \"${TF_PLUGIN_CACHE_DIR}\" mkdir ${TF_PLUGIN_CACHE_DIR}"
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    bat "docker build --no-cache -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG} ./client"
                    bat "docker build --no-cache -t ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG} ./api"
                }

                script {
                    withCredentials([string(credentialsId: 'Dockerpwd', variable: 'DOCKER_PASSWORD')]) {
                        bat "docker login -u ${DOCKER_USERNAME} -p %DOCKER_PASSWORD%"
                    }
                    timeout(10) {
                        bat "docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                        bat "docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                    }
                }
            }
        }

        stage('Provision EC2 Instance') {
            steps {
                dir('terraform') {
                    script {
                        // Initialize only if not cached
                        bat """
                          set TF_PLUGIN_CACHE_DIR=%TF_PLUGIN_CACHE_DIR%
                          if not exist .terraform (
                              terraform init
                          )
                        """
                        
                        // Apply with auto-approve and refresh state
                        bat "terraform apply -refresh=true -auto-approve"
                        
                        // Get instance IP
                        env.EC2_PUBLIC_IP = bat(
                            script: "terraform output -raw instance_ip",
                            returnStdout: true
                        ).trim()
                        echo "Provisioned IP: ${env.EC2_PUBLIC_IP}"
                    }
                }
            }
        }

        stage('Deploy on EC2') {
            steps {
                script {
                    bat """
                        echo Installing Docker on EC2 instance...
                        ssh -i ${SSH_KEY} -o StrictHostKeyChecking=no ${SSH_USER}@${env.EC2_PUBLIC_IP} << EOF
                        sudo apt-get update
                        sudo apt-get install -y docker.io
                        sudo systemctl start docker
                        sudo usermod -aG docker ubuntu
                        exit
                        EOF

                        echo Pulling images...
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "
                            docker pull ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}
                            docker pull ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}
                        "

                        echo Starting containers...
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "
                            docker network create ${NETWORK_NAME} || true
                            docker run -d --rm --name backend \\
                                --network ${NETWORK_NAME} \\
                                -p ${BACKEND_PORT}:${BACKEND_PORT} \\
                                ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}
                            
                            docker run -d --rm --name frontend \\
                                --network ${NETWORK_NAME} \\
                                -p 80:5173 \\
                                ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}
                        "
                    """
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
            // Cleanup Docker cache
            bat 'docker system prune -f'
            echo "Pipeline completed with status: ${currentBuild.currentResult}"
        }
        failure {
            emailext body: 'Pipeline failed. Check ${BUILD_URL}',
                    subject: 'Pipeline Failed: ${JOB_NAME}',
                    to: 'your-team@example.com'
        }
    }
}
