pipeline {
    agent any

    environment {
        DOCKER_USERNAME = 'devgixa'
        DOCKER_IMAGE_FRONTEND = 'devgixa/frontend-service'
        DOCKER_IMAGE_BACKEND = 'devgixa/backend-service'
        BUILD_TAG = "latest"
        NETWORK_NAME = 'app-network'
        BACKEND_PORT = '4040'
    }

    stages {
        stage('SCM Checkout') {
            steps {
                retry(3) {
                    git branch: 'main', url: 'https://github.com/GiharaNavindu/talks-dev.git'
                }
            }
        }

        stage('Build Frontend Image') {
            steps {
                script {
                    bat "docker build -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG} ./client"
                }
            }
        }

        stage('Build Backend Image') {
            steps {
                script {
                    bat "docker build -t ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG} ./api"
                }
            }
        }

        stage('Check Network') {
            steps {
                script {
                    echo "Checking if the app-network exists..."
                    def networkExists = bat(script: "docker network ls | findstr ${NETWORK_NAME}", returnStatus: true)
                    if (networkExists != 0) {
                        echo "Network ${NETWORK_NAME} does not exist, creating it..."
                        bat "docker network create ${NETWORK_NAME}"
                    } else {
                        echo "Network ${NETWORK_NAME} already exists."
                    }
                }
            }
        }

        stage('Run Locally for Testing') {
            steps {
                script {
                    echo "Running containers locally..."

                    // Create and run the backend container with environment variables injected from Jenkins
                    withCredentials([string(credentialsId: 'chatenv', variable: 'DOCKER_ENV_VARS')]) {
                        bat """
                            docker run -d --name backend-container --network ${NETWORK_NAME} \
                                --env ${DOCKER_ENV_VARS} \
                                -p ${BACKEND_PORT}:${BACKEND_PORT} ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}
                        """
                    }

                    // Run the frontend container
                    bat """
                        docker run -d --name frontend-container --network ${NETWORK_NAME} \
                            -p 5173:5173 ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}
                    """

                    echo "Containers are running. Use 'docker ps' to check the status."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'Dockerpwd', variable: 'DOCKER_PASSWORD')]) {
                        def loginResult = bat(script: "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}", returnStatus: true)
                        if (loginResult != 0) {
                            error "Docker login failed!"
                        } else {
                            echo "Successfully logged in to Docker Hub."
                        }
                    }
                }
            }
        }

        stage('Push Images to Docker Hub') {
            steps {
                script {
                    bat "docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                    bat "docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
            echo "Logged out from Docker Hub."
        }
    }
}
