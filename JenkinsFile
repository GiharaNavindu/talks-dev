pipeline {
    agent any

    environment {
        DOCKER_USERNAME = 'devgixa'
        DOCKER_IMAGE_FRONTEND = 'devgixa/frontend-service'
        DOCKER_IMAGE_BACKEND = 'devgixa/backend-service'
        BUILD_TAG = "latest"
        NETWORK_NAME = 'app-network'
        BACKEND_PORT = '4040'
        SSH_USER = 'ubuntu'  // Default user for Ubuntu AMIs
        SSH_KEY = 'chat-app-key.pem' // Update with your key path
    }

    stages {
        stage('SCM Checkout') {
            steps {
                retry(3) {
                    git branch: 'main', url: 'https://github.com/GiharaNavindu/talks-dev.git'
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    bat "docker build -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG} ./client"
                    bat "docker build -t ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG} ./api"
                }
                
                script {
                    withCredentials([string(credentialsId: 'Dockerpwd', variable: 'DOCKER_PASSWORD')]) {
                        bat "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    }
                    bat "docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                    bat "docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                }
            }
        }

        stage('Provision EC2 Instance') {
            steps {
                script {
                    echo "Running Terraform inside the 'terraform' directory..."
                }

                dir('terraform') {  
                    withCredentials([ 
                        string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        terraform(version: 'Terraform-1.11.3', installationStep: true)
                        
                        terraformInit()
                        terraformApply(autoApprove: true)
                        
                        script {
                            env.EC2_PUBLIC_IP = terraformOutput(name: 'instance_ip').trim()
                            echo "Provisioned EC2 Instance IP: ${env.EC2_PUBLIC_IP}"
                        }
                    }
                }
            }
        }

        stage('Deploy on EC2') {
            steps {
                script {
                    echo "Deploying backend and frontend on EC2..."
                    
                    bat """
                        echo "Installing Docker on EC2..."
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "powershell -Command 'Install-Package -Name docker-desktop -Force -Scope CurrentUser'"
                        
                        echo "Pulling images..."
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "docker pull ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "docker pull ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                        
                        echo "Starting containers..."
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "docker network create ${NETWORK_NAME} || true"
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "docker run -d --name backend-container --network ${NETWORK_NAME} -p ${BACKEND_PORT}:${BACKEND_PORT} ${DOCKER_IMAGE_BACKEND}:${BUILD_TAG}"
                        ssh -i ${SSH_KEY} ${SSH_USER}@${env.EC2_PUBLIC_IP} "docker run -d --name frontend-container --network ${NETWORK_NAME} -p 80:5173 ${DOCKER_IMAGE_FRONTEND}:${BUILD_TAG}"
                    """
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
            echo "Logged out from Docker Hub."
        }
    }
}
